<?php

/**
 * BaseProject
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $projectStatusId
 * @property boolean $deleted
 * @property integer $userId
 * @property clob $description
 * @property date $startDate
 * @property date $endDate
 * @property string $currentEffort
 * @property ProjectStatus $ProjectStatus
 * @property Story $Story
 * @property User $User
 * @property Doctrine_Collection $ProjectUser
 * @property Doctrine_Collection $ProjectLogs
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method string              getName()            Returns the current record's "name" value
 * @method integer             getProjectStatusId() Returns the current record's "projectStatusId" value
 * @method boolean             getDeleted()         Returns the current record's "deleted" value
 * @method integer             getUserId()          Returns the current record's "userId" value
 * @method clob                getDescription()     Returns the current record's "description" value
 * @method date                getStartDate()       Returns the current record's "startDate" value
 * @method date                getEndDate()         Returns the current record's "endDate" value
 * @method string              getCurrentEffort()   Returns the current record's "currentEffort" value
 * @method ProjectStatus       getProjectStatus()   Returns the current record's "ProjectStatus" value
 * @method Story               getStory()           Returns the current record's "Story" value
 * @method User                getUser()            Returns the current record's "User" value
 * @method Doctrine_Collection getProjectUser()     Returns the current record's "ProjectUser" collection
 * @method Doctrine_Collection getProjectLogs()     Returns the current record's "ProjectLogs" collection
 * @method Project             setId()              Sets the current record's "id" value
 * @method Project             setName()            Sets the current record's "name" value
 * @method Project             setProjectStatusId() Sets the current record's "projectStatusId" value
 * @method Project             setDeleted()         Sets the current record's "deleted" value
 * @method Project             setUserId()          Sets the current record's "userId" value
 * @method Project             setDescription()     Sets the current record's "description" value
 * @method Project             setStartDate()       Sets the current record's "startDate" value
 * @method Project             setEndDate()         Sets the current record's "endDate" value
 * @method Project             setCurrentEffort()   Sets the current record's "currentEffort" value
 * @method Project             setProjectStatus()   Sets the current record's "ProjectStatus" value
 * @method Project             setStory()           Sets the current record's "Story" value
 * @method Project             setUser()            Sets the current record's "User" value
 * @method Project             setProjectUser()     Sets the current record's "ProjectUser" collection
 * @method Project             setProjectLogs()     Sets the current record's "ProjectLogs" collection
 * 
 * @package    orangepm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseProject extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('orangepm_project');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('project_status_id as projectStatusId', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('deleted', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('user_id as userId', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('start_date as startDate', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             ));
        $this->hasColumn('end_date as endDate', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('current_effort as currentEffort', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ProjectStatus', array(
             'local' => 'projectStatusId',
             'foreign' => 'id',
             'onDelete' => 'set null'));

        $this->hasOne('Story', array(
             'local' => 'id',
             'foreign' => 'project_id',
             'onDelete' => 'set null'));

        $this->hasOne('User', array(
             'local' => 'userId',
             'foreign' => 'id',
             'onDelete' => 'set null'));

        $this->hasMany('ProjectUser', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $this->hasMany('ProjectLog as ProjectLogs', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}