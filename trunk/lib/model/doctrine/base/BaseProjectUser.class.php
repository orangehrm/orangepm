<?php

/**
 * BaseProjectUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $projectId
 * @property integer $userId
 * @property integer $userType
 * @property Project $Project
 * @property User $User
 * 
 * @method integer     getProjectId() Returns the current record's "projectId" value
 * @method integer     getUserId()    Returns the current record's "userId" value
 * @method integer     getUserType()  Returns the current record's "userType" value
 * @method Project     getProject()   Returns the current record's "Project" value
 * @method User        getUser()      Returns the current record's "User" value
 * @method ProjectUser setProjectId() Sets the current record's "projectId" value
 * @method ProjectUser setUserId()    Sets the current record's "userId" value
 * @method ProjectUser setUserType()  Sets the current record's "userType" value
 * @method ProjectUser setProject()   Sets the current record's "Project" value
 * @method ProjectUser setUser()      Sets the current record's "User" value
 * 
 * @package    orangepm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseProjectUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('orangepm_project_user');
        $this->hasColumn('project_id as projectId', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id as userId', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_type as userType', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Project', array(
             'local' => 'project_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}